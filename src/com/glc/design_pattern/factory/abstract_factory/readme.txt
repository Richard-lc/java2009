抽象工厂模式：
    针对工厂方法模式的缺陷，抽象工厂模式将进行改进，一个工厂负责创建一个产品簇的对象。

关于产品簇：是指多个存在内在联系的或者存在逻辑关系的产品。

简述：在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。
        每个生成的工厂都能按照工厂模式提供对象。

抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。
该超级工厂又称为其他工厂的工厂。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。

可以看到，抽象工厂仍然保持着简单工厂模式和工厂方法模式的优点：
    服务端代码和客户端代码是低耦合的。（简单工厂模式）
    所有这一切动作都是新增，不是修改，符合开闭原则。

还新增了一个特有的优点：
    抽象工厂有效减少了工厂的数量，一个工厂就生产同一个产品簇的产品。

这下产品来改需求，是不是还可以笑嘻嘻跟他聊会天了？

再次强调，一个抽象工厂负责创建同一个产品簇的对象。而产品簇是指多个存在内在联系的或者存在逻辑关系的产品。
也就是6号工厂只生产6号的零部件，不负责生产8号零部件。不能不同产品簇的产品混合到一个工厂中进行生产。

缺陷：当增加产品簇时（增加6 、 8号螺帽的生产），这时候就要修改以前工厂（6 、 8号工厂）的源代码了。

总结就是：
    当产品簇比较固定时，考虑使用抽象工厂。
    当产品簇经常变动时，不建议使用抽象工厂。